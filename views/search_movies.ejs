<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Movie Search</title>
  <link rel="icon" type="image/svg+xml"
    href="data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 100 100%22><text y=%22.9em%22 font-size=%2290%22>üêµ</text></svg>">
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
</head>

<body class="bg-stone-800 text-white flex flex-col items-center justify-center min-h-screen p-4">
  <button onclick="window.location.href='/logout'"
    class="absolute top-4 left-4 bg-stone-700 hover:bg-stone-600 text-white px-4 py-2 rounded-lg shadow-md transition">
    Logout
  </button>
  <div id="edit-modal"
    class="hidden fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50 backdrop-blur-sm">
    <div
      class="bg-stone-900 text-white p-6 rounded-lg shadow-lg w-full max-w-md max-h-[70vh] overflow-hidden flex flex-col">
      <h2 id="edit-modal-title" class="text-xl font-bold mb-4"></h2>
      <div id="edit-movie-list" class="overflow-auto flex-1 p-2 border border-stone-700 rounded-lg max-h-120">
        <ul id="movie-list-ul">
        </ul>
      </div>
      <button id="close-edit-modal"
        class="mt-4 bg-red-500 hover:bg-red-600 text-white font-semibold py-2 px-4 rounded-lg transition">
        Close
      </button>
    </div>
  </div>
  <div id="sorted-movie">

  </div>
  <div class="flex justify-between w-full max-w-xl items-center relative">
    <div class="bg-stone-700 p-6 rounded-lg shadow-lg w-full max-w-md text-center max-h-[70vh] overflow-auto">
      <h1 class="text-2xl font-bold mb-4">Search for a Movie</h1>
      <div class="flex space-x-2">
        <input type="text" id="movie-input" class="w-full p-2 rounded-lg text-black" placeholder="Enter movie name">
        <button onclick="search_movie_db()"
          class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-lg transition duration-150">Search</button>
        <button id="random"
          class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-lg transition duration-150">Random</button>
      </div>
      <div id="movies-table" class="mt-4 text-left text-lg"></div>
    </div>

    <div class="flex flex-col space-y-6 absolute left-[calc(85%)] top-1/2 -translate-y-1/2">
      <div class="bg-stone-700 p-12 rounded-lg shadow-lg xl:w-[400px] w-[200px] text-center flex-shrink-0 space-y-6">
        <div class="flex items-center justify-center gap-2">
          <svg class="w-6 h-6 text-gray-800 dark:text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg"
            width="24" height="24" fill="currentColor" viewBox="0 0 24 24">
            <title>Search for a movie to create a new list</title>
            <path fill-rule="evenodd"
              d="M2 12C2 6.477 6.477 2 12 2s10 4.477 10 10-4.477 10-10 10S2 17.523 2 12Zm9.408-5.5a1 1 0 1 0 0 2h.01a1 1 0 1 0 0-2h-.01ZM10 10a1 1 0 1 0 0 2h1v3h-1a1 1 0 1 0 0 2h4a1 1 0 1 0 0-2h-1v-4a1 1 0 0 0-1-1h-2Z"
              clip-rule="evenodd" />
          </svg>
          <label for="user-lists" class="text-white font-semibold">User lists</label>
        </div>

        <div class="flex justify-center items-center gap-2">
          <select id="user-lists" class="bg-stone-600 text-white px-4 py-2 rounded-lg">
          </select>
          <button id="newlist"
            class="bg-blue-500 hover:bg-blue-700 text-white py-2 px-4 rounded-lg transition duration-150">Create</button>
        </div>

        <div class="flex justify-center gap-3">
          <button id="sort"
            class="bg-green-500 hover:bg-green-700 text-white py-2 px-5 rounded-lg transition duration-150">Draw</button>
          <button id="edit"
            class="bg-yellow-500 hover:bg-yellow-700 text-white py-2 px-5 rounded-lg transition duration-150">Edit</button>
          <button id="delete"
            class="bg-red-500 hover:bg-red-700 text-white py-2 px-5 rounded-lg transition duration-150">Delete</button>
        </div>
      </div>


      <div class="bg-stone-700 p-7 rounded-lg shadow-lg w-[400px] text-left flex-shrink-0">
        <div class="flex items-center justify-center gap-2">
          <svg class="w-6 h-6 text-gray-800 dark:text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg"
            width="24" height="24" fill="currentColor" viewBox="0 0 24 24">
            <title>Click on the items to view more details</title>
            <path fill-rule="evenodd"
              d="M2 12C2 6.477 6.477 2 12 2s10 4.477 10 10-4.477 10-10 10S2 17.523 2 12Zm9.408-5.5a1 1 0 1 0 0 2h.01a1 1 0 1 0 0-2h-.01ZM10 10a1 1 0 1 0 0 2h1v3h-1a1 1 0 1 0 0 2h4a1 1 0 1 0 0-2h-1v-4a1 1 0 0 0-1-1h-2Z"
              clip-rule="evenodd" />
          </svg>

          <h1 class="text-center font-semibold">User Statistics</h1>
        </div>
        <br>
        <h3 class="font-medium grid grid-cols-2">
          <span>Last Movie</span>
          <span class="text-blue-400 font-bold text-right hover:text-blue-700 transition duration-150"
            id="last-movie"></span>
        </h3>
        <h3 class="font-medium grid grid-cols-2 pt-3">
          <span>Watched Movies</span>
          <span class="text-blue-400 font-bold text-right hover:text-blue-700 transition duration-150"
            id="user-watched-count"></span>
        </h3>
        <h3 class="font-medium grid grid-cols-2 pt-3">
          <span>Highest Rated</span>
          <span class="text-blue-400 font-bold text-right hover:text-blue-700 transition duration-150"
            id="highest-rated"></span>
        </h3>
        <h3 class="font-medium grid grid-cols-2 pt-3">
          <span>Lowest Rated</span>
          <span class="text-blue-400 font-bold text-right hover:text-blue-700 transition duration-150"
            id="lowest-rated"></span>
        </h3>
      </div>
    </div>
  </div>

  <script>
    function updateSearch() {
      var input, filter, li, a, i, txtValue;
      input = document.getElementById("search-list-input");
      filter = input.value.toUpperCase();
      li = document.getElementsByClassName("movie-in-list");

      for (i = 0; i < li.length; i++) {
        a = li[i];
        txtValue = a.textContent || a.innerText;
        txtValue = txtValue.split("\nDelete")[0]
        if (txtValue.toUpperCase().indexOf(filter) > -1) {
          li[i].classList.remove("hidden");
        } else {
          li[i].classList.add("hidden");
        }
      }
    }

    document.getElementById("newlist").addEventListener("click", async (e) => {
      const {value: listName} = await Swal.fire({
        title: "Create a new list",
        input: "text",
        inputPlaceholder: "Enter your list name",
        showCancelButton: true,
        confirmButtonText: "Create",
        cancelButtonText: "Cancel",
        confirmButtonColor: "#2563eb",
        cancelButtonColor: "#d33",
        background: "#1c1917",
        color: "#ffffff",
        inputAttributes: {
          maxlength: 50,
          autocapitalize: "off",
          autocorrect: "off"
        }
      });

      if (listName) {
        const response = await fetch("/api/list/create", {
          method: "POST",
          headers: {
            "Content-Type": "application/json"
          },
          body: JSON.stringify({list_name: listName})
        })
        if (response.status == 409) {
          Swal.fire({
            title: "This list already exists",
            text: "Try putting a different name!",
            icon: "error",
            background: "#1c1917",
            color: "#ffffff",
            iconColor: "#ef4444",
            confirmButtonText: "Ok",
            confirmButtonColor: "#2563eb",
          });
        } else if (response.status == 200) {
          window.location.reload();
        }
      }
    });

    document.getElementById("edit").addEventListener("click", async (e) => {
      const list = document.getElementById("user-lists").value
      const list_name = document.getElementById("user-lists").options[document.getElementById("user-lists").selectedIndex].text;

      const response = await fetch("/api/list/edit", {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify({list_id: list})
      })

      if (response.status != 200) {
        Swal.fire({
          title: "No lists found!",
          text: "Search for a movie and create your list!",
          icon: "error",
          background: "#1c1917",
          color: "#ffffff",
          iconColor: "#ef4444",
          confirmButtonText: "Ok",
          confirmButtonColor: "#2563eb",
        });
      }

      const data = await response.json()

      document.getElementById("edit-modal-title").innerHTML = `
            Editing: ${list_name}
            <br>
            <div class="flex justify-between items-center">
              <input
                type="text"
                id="search-list-input"
                onkeyup="updateSearch()"
                placeholder="Search in this list..."
                class="mt-3 px-2 py-1 rounded-xl border border-gray-600 bg-gray-200 text-black placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-400 w-52 text-sm"
              >
              <span class="text-sm mt-3">
                Movie count: ${data.movies_count[0].count}
              </span>
            </div>
          `;

      const movie_list_container = document.getElementById("edit-movie-list");
      movie_list_container.innerHTML = "";

      if (data.movies.length == 0) {
        movie_list_container.innerHTML = "<p class='text-center text-gray-400'>You don't have any movie in this list.</p>";
      } else {
        data.movies.forEach(movie => {
          const movie_item = document.createElement("div");
          movie_item.classList.add("p-2", "border-b", "border-stone-700", "text-white", "flex", "justify-between", "movie-in-list");

          movie_item.innerHTML = `
                <a href='/detail/${movie.imdb_id}' class='text-white hover:text-blue-500 transition duration-150'>${movie.titulo}</a>
                <button class='text-blue-300 delete-btn hover:text-blue-200' data-id="${movie.imdb_id}">Delete</button>
              `;

          movie_list_container.appendChild(movie_item);
        });
      }

      document.querySelectorAll(".delete-btn").forEach(button => {
        button.addEventListener("click", async (event) => {
          const movie_id = event.target.getAttribute("data-id");

          const response = await fetch("/api/list/edit/delete", {
            method: "POST",
            headers: {
              "Content-Type": "application/json"
            },
            body: JSON.stringify({movie_id: movie_id, list_id: list})
          });

          if (response.status != 200) {
            return
          }

          window.location.reload();
        });
      });

      document.getElementById("edit-modal").classList.remove("hidden");
    });

    document.getElementById("close-edit-modal").addEventListener("click", () => {
      document.getElementById("edit-modal").classList.add("hidden");
    });

    document.getElementById("random").addEventListener("click", async (e) => {
      const result = await Swal.fire({
        title: "Do you want to pick a random movie?",
        text: "The movie will be choose from our database.",
        color: "#ffffff",
        icon: "info",
        background: "#1c1917",
        showCancelButton: true,
        confirmButtonColor: "#2563eb",
        cancelButtonColor: "#d33",
        confirmButtonText: "Yes"
      })

      if(result.isConfirmed){
          const response = await fetch("/api/random");
          const data = await response.json()
          movie_modal(data.rows[0], 0);
      }
    })

    document.getElementById("sort").addEventListener("click", async (e) => {
      const list = document.getElementById("user-lists").value

      const response = await fetch("/api/list/sort", {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify({list_id: list})
      })


      if (response.status != 200) {
        if (response.status == 401) {
          Swal.fire({
            title: "Your list is empty",
            text: "Add some movies to enable random selection!",
            icon: "error",
            background: "#1c1917",
            color: "#ffffff",
            iconColor: "#ef4444",
            confirmButtonText: "Ok",
            confirmButtonColor: "#2563eb",
          });

          return;
        }
        else if(response.status == 202){
          Swal.fire({
            title: "You have a pendency!",
            text: "You need to watch the movie to pick another one!",
            icon: "error",
            background: "#1c1917",
            color: "#ffffff",
            iconColor: "#ef4444",
            confirmButtonText: "Ok",
            confirmButtonColor: "#2563eb",
          });
          return;
        }else{
          Swal.fire({
            title: "No lists found!",
            text: "Search for a movie and create your list!",
            icon: "error",
            background: "#1c1917",
            color: "#ffffff",
            iconColor: "#ef4444",
            confirmButtonText: "Ok",
            confirmButtonColor: "#2563eb",
          });
          return;
        }
      }

      const data = await response.json()

      movie_modal(data.rows[0], list);
    })

    document.getElementById("delete").addEventListener("click", async (e) => {
      const list = document.getElementById("user-lists").value

      const result = await Swal.fire({
        title: "Are you sure?",
        text: "You won't be able to revert this!",
        color: "#ffffff",
        icon: "warning",
        background: "#1c1917",
        showCancelButton: true,
        confirmButtonColor: "#2563eb",
        cancelButtonColor: "#d33",
        confirmButtonText: "Yes"
      });

      if (result.isConfirmed) {
        try {
          const response = await fetch("/api/list/delete", {
            method: "DELETE",
            headers: {
              "Content-Type": "application/json"
            },
            body: JSON.stringify({list_id: list})
          });

          if (response.status === 200) {
            window.location.reload();
          } else {
            await Swal.fire({
              title: "No lists found!",
              text: "Search for a movie and create your list!",
              icon: "error",
              background: "#1c1917",
              color: "#ffffff",
              iconColor: "#ef4444",
              confirmButtonText: "Ok",
              confirmButtonColor: "#2563eb",
            });
          }
        } catch (error) {
          console.error("Error deleting list:", error);
          await Swal.fire({
            title: "Error!",
            text: "Something went wrong while deleting the list.",
            icon: "error",
            confirmButtonText: "Ok",
            confirmButtonColor: "#2563eb",
          });
        }
      }
    })

    async function load_user_watched_count() {
      const span_count = document.getElementById("user-watched-count");
      const highest_rated = document.getElementById("highest-rated");
      const lowest_rated = document.getElementById("lowest-rated");
      const last_movie = document.getElementById("last-movie");

      const response = await fetch("/api/user-watched-count");
      if (response.status == 404) {
        span_count.innerHTML = "No data";
        highest_rated.innerHTML = "No data";
        lowest_rated.innerHTML = "No data";
        last_movie.innerHTML = "No data";
        window.location.href = "/login";
        return;
      }

      const data = await response.json();
      span_count.innerHTML = `
          <button type="button" id="all-watched">
            <div class="flex items-center gap-1">
            ${data.watchedCount}
            </div>
            </button>
          `;
      if(data.watchedCount != 0){
        if (data.highestRated.name_movie.length > 15) {
          data.highestRated.name_movie = data.highestRated.name_movie.slice(0, 13) + "...";
        }
        highest_rated.innerHTML = `<a href=/detail/${data.highestRated.id_movie}>${data.highestRated.name_movie}</a>`;
        if (data.lowestRated.name_movie.length > 15) {
          data.lowestRated.name_movie = data.lowestRated.name_movie.slice(0, 13) + "...";
        }
        lowest_rated.innerHTML = `<a href=/detail/${data.lowestRated.id_movie}>${data.lowestRated.name_movie}</a>`;
        if (data.lastMovie.name_movie.length > 15) {
          data.lastMovie.name_movie = data.lastMovie.name_movie.slice(0, 13) + "...";
        }
        last_movie.innerHTML = `<a href=/detail/${data.lastMovie.id_movie}>${data.lastMovie.name_movie}</a>`;
      }else{
        highest_rated.innerHTML = `None`
        lowest_rated.innerHTML = `None`
        last_movie.innerHTML = `None`
      }
      document.getElementById("all-watched").addEventListener("click", async (e) => {

        const response = await fetch("/api/users/all-watched");

        const data = await response.json();
        let total_view = data.total_view[0].total_sum;
        if(total_view == null){ total_view = 0 }
        document.getElementById("edit-modal-title").innerHTML = `
              Watched movies - ${total_view}
              <br>
              <div class="flex justify-between items-center">
                <input
                  type="text"
                  id="search-list-input"
                  onkeyup="updateSearch()"
                  placeholder="Search in this list..."
                  class="mt-3 px-2 py-1 rounded-xl border border-gray-600 bg-gray-200 text-black placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-400 w-52 text-sm"
                >
                <div class="-mt-4">
                  <label for="sort-method" class="block text-sm text-white mb-1">Sort by:</label>
                  <select id="sort-method" class="bg-stone-800 text-white rounded text-center text-base pb-[5px] pt-[5px] pl-3">
                    <option value="score">Score</option>
                    <option value="name">Name</option>
                    <option value="times">Times Watched</option>
                  </select>
                </div>
              </div>
            `;
        document.getElementById("sort-method").addEventListener("change", (e) => {
          const method = e.target.value;
          let sorting = '';
          if (method === "score") {
            sorting = data.movies.sort((a, b) => b.score_movie - a.score_movie);
          } else if (method === "times") {
            sorting = data.movies.sort((a, b) => b.times_watched - a.times_watched);
          } else if (method === "name") {
            sorting = data.movies.sort((a, b) => a.name_movie.localeCompare(b.name_movie));
          }

          render_watched(sorting);
        });

        if (data.movies.length == 0) {
          const movie_list_container = document.getElementById("edit-movie-list");
          movie_list_container.innerHTML = "";
          movie_list_container.innerHTML = "<p class='text-center text-gray-400'>You didn't watched any movie yet.</p>";
        } else {
          render_watched(data.movies.sort((a, b) => b.score_movie - a.score_movie));
        }

        document.getElementById("edit-modal").classList.remove("hidden");
      });
    }

    function render_watched(movies){
            const movie_list_container = document.getElementById("edit-movie-list");
            movie_list_container.innerHTML = "";
            movies.forEach(movie => {
            const movie_item = document.createElement("div");
            movie_item.classList.add("p-2", "border-b", "border-stone-700", "text-white", "flex", "justify-between", "movie-in-list");

            let score_fix = movie.score_movie.toString();

            if (score_fix.length === 1) {
              score_fix = `0.${score_fix[0]}`
            } else if (score_fix.length === 2) {
              score_fix = `${score_fix[0]}.${score_fix[1]}`;
            } else if (score_fix.length === 3) {
              score_fix = `${score_fix[0]}${score_fix[1]}`;
            }

            movie_item.innerHTML = `
                  <a href='/detail/${movie.id_movie}' class='text-white hover:text-blue-500 transition duration-150'>
                    ${movie.name_movie}
                  </a>

                  <div class="flex flex-col items-end">
                    <span class="flex items-center gap-1">
                      <svg class="w-6 h-6 text-gray-800 dark:text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg"
                           width="12" height="12" fill="none" viewBox="0 0 24 24">
                        <path stroke="currentColor" stroke-width="2" d="M21 12c0 1.2-4.03 6-9 6s-9-4.8-9-6c0-1.2 4.03-6 9-6s9 4.8 9 6Z"/>
                        <path stroke="currentColor" stroke-width="2" d="M15 12a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z"/>
                      </svg>
                      ${movie.times_watched}
                    </span>
                    <span class="text-sm text-gray-400">${score_fix}/10</span>
                  </div>
                `;
            movie_list_container.appendChild(movie_item);
          });
    }

    async function load_user_list() {
      const list_selector = document.getElementById("user-lists");

      const sort_button = document.getElementById("sort")
      const edit_button = document.getElementById("edit")
      const delete_button = document.getElementById("delete")

      const response = await fetch("/api/user-list");
      if (response.status == 404) {
        sort_button.classList.add("cursor-not-allowed")
        sort_button.classList.add("bg-gray-500")
        sort_button.classList.add("hover:bg-gray-500")
        sort_button.disabled = true;
        edit_button.classList.add("cursor-not-allowed")
        edit_button.classList.add("bg-gray-500")
        edit_button.classList.add("hover:bg-gray-500")
        edit_button.disabled = true;
        delete_button.classList.add("cursor-not-allowed")
        delete_button.classList.add("bg-gray-500")
        delete_button.classList.add("hover:bg-gray-500")
        delete_button.disabled = true;
        list_selector.innerHTML = "<option>No lists found</option>";
        return;
      } else {

        sort_button.classList.remove("cursor-not-allowed")
        sort_button.classList.remove("bg-gray-500")
        sort_button.classList.remove("hover:bg-gray-500")
        sort_button.disabled = false;
        edit_button.classList.remove("cursor-not-allowed")
        edit_button.classList.remove("bg-gray-500")
        edit_button.classList.remove("hover:bg-gray-500")
        edit_button.disabled = false;
        delete_button.classList.remove("cursor-not-allowed")
        delete_button.classList.remove("bg-gray-500")
        delete_button.classList.remove("hover:bg-gray-500")
        delete_button.disabled = false;
      }

      const lists = await response.json();
      list_selector.innerHTML = "";

      lists.forEach(list => {
        const option = document.createElement("option");
        option.value = list.id;
        option.textContent = list.nome_lista;
        list_selector.appendChild(option);
      });
    }

    window.addEventListener("keydown", function (e) {
      if (e.code === "Enter") {
        search_movie_db();
      }
    });

    async function movie_modal(data, list) {
      const movie_info = data
      const list_id = list;
      const sorted_movie = document.getElementById("sorted-movie");

      if (movie_info.imdb_rate == ""){
        movie_info.imdb_rate = "??"
      }

      sorted_movie.classList.add("fixed", "inset-0", "z-50");
      sorted_movie.innerHTML = `
            <div class="flex items-center justify-center min-h-screen bg-black bg-opacity-50 backdrop-blur-sm animate-fade-in">
              <div class="flex flex-col items-center text-center bg-stone-900 text-white p-8 pl-8 pr-8 rounded-lg shadow-lg w-full max-w-sm mx-auto scale-95">
                <div class="flex items-center justify-center mb-4 gap-2">
                  <svg xmlns="http://www.w3.org/2000/svg" width="80" height="30" viewBox="0 0 80 30">
                  <rect width="80" height="30" fill="#F5C518" rx="8" ry="8"/>
                  <text
                  x="50%"
                  y="50%"
                  text-anchor="middle"
                  dominant-baseline="middle"
                  dy=".1em"
                  font-family="Arial, sans-serif"
                  font-size="16"
                  fill="black"
                  font-weight="bold">
                  IMDB
                  </text>
                  </svg>
                  <svg class="w-6 h-6 text-yellow-500" aria-hidden="true" xmlns="http://www.w3.org/2000/svg"
                       width="24" height="24" fill="currentColor" viewBox="0 0 24 24">
                    <path d="M13.849 4.22c-.684-1.626-3.014-1.626-3.698 0L8.397 8.387l-4.552.361c-1.775.14-2.495
                             2.331-1.142 3.477l3.468 2.937-1.06 4.392c-.413 1.713 1.472 3.067
                             2.992 2.149L12 19.35l3.897 2.354c1.52.918 3.405-.436
                             2.992-2.15l-1.06-4.39 3.468-2.938c1.353-1.146.633-3.336-1.142-3.477l-4.552-.36-1.754-4.17Z"/>
                    <title>IMDB Rating</title>
                  </svg>
                  <span class="text-lg font-bold text-white">${data.imdb_rate} / 10</span>
                </div>

                <h2 class="text-xl font-bold">${movie_info.titulo} - ${movie_info.ano}</h2>
                <h4 class="text-sm text-gray-300">${movie_info.duracao}</h4>
                <img src="${movie_info.poster}" alt="Poster" class="w-full h-80 2xl:h-auto rounded-lg mt-3">

                <label for="rating" class="mt-4">Rate this movie</label>
                <div class="flex items-center justify-center gap-2 mt-1">
                <input id="rating" type="number" min="0" max="100" value="0"
                class="w-20 text-center font-semibold text-black [appearance:textfield] [&::-webkit-outer-spin-button]:appearance-none [&::-webkit-inner-spin-button]:appearance-none px-2 py-1 rounded-md">
                <span class="font-semibold text-white">/ 10.0</span>
              </div>

              <button id="close-modal" class="mt-4 bg-green-600 hover:bg-green-700 text-white font-semibold py-4 px-8 rounded-lg transition">
              Set as watched
              </button>
              <p class='text-gray-300'>(You don't have choice)</p>

            </div>
          </div>
          `

      document.getElementById("rating").addEventListener("input", () => {
        let ratingInput = document.getElementById("rating")
        let ratingValue = ratingInput.value.replace(/\D/g, "");
        if (ratingValue.length > 1 && ratingValue[0] === "0") {
          ratingValue = ratingValue.slice(1);
        }
        let intValue = parseInt(ratingValue || "0");
        intValue = Math.min(100, Math.max(0, intValue));
        ratingInput.value = (intValue / 10).toFixed(1);
        ratingInput.dataset.intValue = intValue;
      })
      document.getElementById("close-modal").addEventListener("click", async () => {
        const movie_rating = document.getElementById("rating").dataset.intValue

        const data = await fetch("/api/list/sort/rate", {
          method: "POST",
          headers: {
            "Content-Type": "application/json"
          },
          body: JSON.stringify({
            list_id: list_id,
            sorted_movie: movie_info.imdb_id,
            title_movie: movie_info.titulo,
            rating_movie: movie_rating
          })
        })

        const response = await data.json();

        load_user_watched_count();
        sorted_movie.innerHTML = "";
        sorted_movie.classList.remove("fixed", "inset-0", "z-50")

      });
    }


    async function check_dependency() {
      const dependency_response = await fetch('/api/user/pendency', {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
      });

      const data = await dependency_response.json();

      if (dependency_response.status == 209) {
        return false;
      }

      const list_id = data.list_id;
      const movie_info = data.pendencia;

      movie_modal(movie_info, list_id);
    }

    async function search_movie_db() {
      var input = document.getElementById("movie-input").value;
      input = input.toLowerCase();

      if (input.trim() == "") {
        return;
      }

      const tabela = document.getElementById("movies-table");
      tabela.innerHTML = "<h2 class='text-white text-center animate-pulse'>Loading...</h2>";

      var response = await fetch(`/search/${input}`);
      const data = await response.json();

      tabela.innerHTML = "";
      data.map((res) => {
        const url = new URL(res.link, 'https://www.imdb.com');
        const pathname = url.pathname.split('/');
        const movieId = pathname[2];
        tabela.innerHTML += `<span class="text-white"><a href="/detail/${movieId}" class="text-blue-300 hover:text-blue-500">${res.title}</a> - ${res.year}</span><hr>`;
      });
    }
    window.addEventListener('pageshow', function (event) {
      load_user_list();
      load_user_watched_count();
      check_dependency();
    });

    let lastFetchTime = 0;
    window.addEventListener('focus', function (event) {
      const now = Date.now();

      if (now - lastFetchTime > 2500) {
        load_user_list();
        load_user_watched_count();
        check_dependency();
        lastFetchTime = now;
      }
    });
  </script>
</body>

</html>
