<!DOCTYPE html>
<html lang="pt-br">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="icon" type="image/svg+xml"
        href="data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 100 100%22><text y=%22.9em%22 font-size=%2290%22>üêµ</text></svg>">
    <title>Movie Detail</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
</head>

<body class="bg-stone-900 text-white flex items-center justify-center min-h-screen">

    <button onclick="window.history.back()"
        class="absolute top-4 left-4 bg-stone-700 hover:bg-stone-600 text-white px-4 py-2 rounded-lg shadow-md transition">
        ‚Üê Home
    </button>

    <div class="flex flex-col items-center gap-6">
        <div id="movie-rate" class="pt-3">
        </div>
        <div id="user-rate">
        </div>
        <div id="movie-info" class="text-center text-stone-300 w-full max-w-md p-3 bg-stone-800 rounded-lg shadow-lg">
            <p class="animate-pulse">Loading...</p>
        </div>
        <div class="flex flex-wrap items-center justify-center gap-4">
            <button id="newlist"
                class="bg-blue-600 hover:bg-blue-700 text-white py-3 px-6 rounded-lg transition duration-150">
                Create
            </button>

            <div class="flex flex-col">
                <select id="list-selector" class="bg-stone-700 text-white px-6 py-3 rounded-lg shadow-md">
                    <option>Preparing user lists...</option>
                </select>
            </div>

            <button type="submit" id="add-movie" disabled
                class="transition duration-150 bg-green-700 text-white cursor-not-allowed rounded-lg shadow-md px-6 py-3 hover:bg-green-800">
                Add movie to your list
            </button>
        </div>
    </div>


    <script>
        async function load_user_list() {
            const list_selector = document.getElementById("list-selector");

            const response = await fetch("/api/user-list");

            if (response.status == 404) {
                list_selector.innerHTML = "<option value='default'>No lists found</option>";
                return;
            } else if (response.status == 401) {
                window.location.href = "/login";
                return;
            }

            const lists = await response.json();
            list_selector.innerHTML = "";

            lists.forEach(list => {
                const option = document.createElement("option");
                option.value = list.id;
                option.textContent = list.nome_lista;
                list_selector.appendChild(option);
            });
        }

        document.getElementById("list-selector").addEventListener("change", function () {
            const newListInput = document.getElementById("new-list-input");
            const newButtonInput = document.getElementById("new-list-button")
            if (this.value === "new") {
                newListInput.value = ""
                newListInput.classList.remove("hidden");
                newButtonInput.classList.remove("hidden");
            } else {
                newListInput.classList.add("hidden");
                newButtonInput.classList.add("hidden");
            }
        });

        document.getElementById("add-movie").addEventListener("click", async (e) => {
            e.preventDefault()

            const list_selector = document.getElementById("list-selector");

            const movie_id = "<%= movie_id %>";
            const list_id = list_selector.value;

            if (list_id == "new" || list_id == "default") {
                Swal.fire({
                    title: "Could not find any list!",
                    text: "Click in the list label on the right side of this button to create a new one.",
                    icon: "question",
                    background: "#1c1917",
                    color: "#ffffff",
                    iconColor: "#d6ed26",
                    confirmButtonText: "Ok",
                    confirmButtonColor: "#2563eb",
                });
                return;
            }

            const response = await fetch("/api/list/add", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({movie_imdb_id: movie_id, list_id: list_id})
            })

            if (response.status == 409) {
                Swal.fire({
                    title: "The movie is already on this list",
                    text: "Try searching for another movie or switching the target list!",
                    icon: "error",
                    background: "#1c1917",
                    color: "#ffffff",
                    iconColor: "#ef4444",
                    confirmButtonText: "Ok",
                    confirmButtonColor: "#2563eb",
                });
            }

            if (response.status == 209) {
                Swal.fire({
                    title: "The list doesn't exist",
                    text: "Try creating a list and add it again!",
                    icon: "error",
                    background: "#1c1917",
                    color: "#ffffff",
                    iconColor: "#ef4444",
                    confirmButtonText: "Ok",
                    confirmButtonColor: "#2563eb",
                });
            }

            if (response.status == 200) {
                Swal.fire({
                    title: "Movie added successfully",
                    text: "Now give the random picker a try!",
                    icon: "success",
                    background: "#1c1917",
                    color: "#ffffff",
                    iconColor: "#70FA82",
                    confirmButtonText: "Ok",
                    confirmButtonColor: "#2563eb",
                });
            }
        })

        document.getElementById("newlist").addEventListener("click", async (e) => {
            const {value: listName} = await Swal.fire({
                title: "Create a new list",
                input: "text",
                inputPlaceholder: "Enter your list name",
                showCancelButton: true,
                confirmButtonText: "Create",
                cancelButtonText: "Cancel",
                confirmButtonColor: "#2563eb",
                cancelButtonColor: "#d33",
                background: "#1c1917",
                color: "#ffffff",
                inputAttributes: {
                    maxlength: 50,
                    autocapitalize: "off",
                    autocorrect: "off"
                }
            });

            if (listName) {
                const response = await fetch("/api/list/create", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify({list_name: listName})
                })
                if (response.status == 409) {
                    Swal.fire({
                        title: "This list already exists",
                        text: "Try putting a different name!",
                        icon: "error",
                        background: "#1c1917",
                        color: "#ffffff",
                        iconColor: "#ef4444",
                        confirmButtonText: "Ok",
                        confirmButtonColor: "#2563eb",
                    });
                } else if (response.status == 200) {
                    window.location.reload();
                }
            }
        });

        async function load_data() {
            const movie_element = document.getElementById("movie-info");
            movie_element.innerHTML = `<p class="animate-pulse text-center">Loading...</p>`;

            var response = await fetch(`/api/detail/<%= movie_id %>`);

            if (!response.ok) {
                movie_element.innerHTML = `<p class="text-red-500">Error trying to fetch the movie data!</p>`;
                return;
            }

            const data = await response.json();

            if (data.imdb_rate == "") {data.imdb_rate = "??"}

            movie_element.innerHTML = `
                <h2 class="text-xl 2xl:text-2xl font-bold text-center mb-4 text-white">${data.titulo} - ${data.ano}</h2>
                <p>${data.duracao}</p>
                <img src="${data.poster}" alt="${data.titulo}" class="mt-4 rounded-lg shadow-md mx-auto max-w-xs">
                <p><strong>Director</strong> <br> <span class="text-sm 2xl:text-base">${data.diretor}</span></p>
                <p class="mt-2"><strong>Synopsis</strong><br>
                  <div id="synopsis-scroll" class="text-sm 2xl:text-base overflow-y-auto" style="max-height: 100px;">
                    ${data.sinopse}
                  </div>
                </p>
            `;


            const movie_rate = document.getElementById("movie-rate");

            const user_movie_rate = await fetch("/api/user-rate", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({
                    movie_id: data.imdb_id
                })
            });

            const user_movie_rate_data = await user_movie_rate.json();

            if (user_movie_rate_data.user_rated[0] == undefined) {
                movie_rate.innerHTML = `
                  <div class="flex items-center gap-2 align-middle -mb-8">
                    <svg xmlns="http://www.w3.org/2000/svg" width="80" height="30" viewBox="0 0 80 30">
                      <rect width="80" height="30" fill="#F5C518" rx="8" ry="8"/>
                      <text
                        x="50%"
                        y="50%"
                        text-anchor="middle"
                        dominant-baseline="middle"
                        dy=".1em"
                        font-family="Arial, sans-serif"
                        font-size="16"
                        fill="black"
                        font-weight="bold">
                        TMDB
                      </text>
                    </svg>

                    <svg class="w-6 h-6 text-yellow-500" aria-hidden="true" xmlns="http://www.w3.org/2000/svg"
                         width="24" height="24" fill="currentColor" viewBox="0 0 24 24">
                      <path d="M13.849 4.22c-.684-1.626-3.014-1.626-3.698 0L8.397 8.387l-4.552.361c-1.775.14-2.495
                               2.331-1.142 3.477l3.468 2.937-1.06 4.392c-.413 1.713 1.472 3.067
                               2.992 2.149L12 19.35l3.897 2.354c1.52.918 3.405-.436
                               2.992-2.15l-1.06-4.39 3.468-2.938c1.353-1.146.633-3.336-1.142-3.477l-4.552-.36-1.754-4.17Z"/>
                      <title>TMDB Rating</title>
                    </svg>
                    <h1 class="text-lg font-bold">${data.imdb_rate} / 10</h1>
                  </div>
                `;
            } else {
                let score_fix = user_movie_rate_data.user_rated[0].score_movie.toString();

                if (score_fix.length === 1) {
                    score_fix = `0.${score_fix[0]}`
                } else if (score_fix.length === 2) {
                    score_fix = `${score_fix[0]}.${score_fix[1]}`;
                } else if (score_fix.length === 3) {
                    score_fix = `${score_fix[0]}${score_fix[1]}`;
                }

                movie_rate.innerHTML = `
                  <div class="flex items-center gap-2 align-middle -mb-20">

                    <svg xmlns="http://www.w3.org/2000/svg" width="80" height="30" viewBox="0 0 80 30">
                      <rect width="80" height="30" fill="#F5C518" rx="8" ry="8"/>
                      <text
                        x="50%"
                        y="50%"
                        text-anchor="middle"
                        dominant-baseline="middle"
                        dy=".1em"
                        font-family="Arial, sans-serif"
                        font-size="16"
                        fill="black"
                        font-weight="bold">
                        TMDB
                      </text>
                    </svg>

                    <svg class="w-6 h-6 text-yellow-500" aria-hidden="true" xmlns="http://www.w3.org/2000/svg"
                         width="24" height="24" fill="currentColor" viewBox="0 0 24 24">
                      <path d="M13.849 4.22c-.684-1.626-3.014-1.626-3.698 0L8.397 8.387l-4.552.361c-1.775.14-2.495
                               2.331-1.142 3.477l3.468 2.937-1.06 4.392c-.413 1.713 1.472 3.067
                               2.992 2.149L12 19.35l3.897 2.354c1.52.918 3.405-.436
                               2.992-2.15l-1.06-4.39 3.468-2.938c1.353-1.146.633-3.336-1.142-3.477l-4.552-.36-1.754-4.17Z"/>
                      <title>TMDB Rating</title>
                    </svg>
                    <h1 class="text-lg font-bold">${data.imdb_rate} / 10</h1>

                    <span class="pl-8 pr-8"></span>

                    <svg xmlns="http://www.w3.org/2000/svg" width="80" height="30" viewBox="0 0 80 30">
                      <rect width="80" height="30" fill="#3B82F6" rx="8" ry="8"/>
                      <text
                        x="50%"
                        y="50%"
                        text-anchor="middle"
                        dominant-baseline="middle"
                        dy=".1em"
                        font-family="Arial, sans-serif"
                        font-size="16"
                        fill="white"
                        font-weight="bold">
                        User
                      </text>
                    </svg>

                    <svg class="w-6 h-6 text-blue-500" aria-hidden="true" xmlns="http://www.w3.org/2000/svg"
                         width="24" height="24" fill="currentColor" viewBox="0 0 24 24">
                      <path d="M13.849 4.22c-.684-1.626-3.014-1.626-3.698 0L8.397 8.387l-4.552.361c-1.775.14-2.495
                               2.331-1.142 3.477l3.468 2.937-1.06 4.392c-.413 1.713 1.472 3.067
                               2.992 2.149L12 19.35l3.897 2.354c1.52.918 3.405-.436
                               2.992-2.15l-1.06-4.39 3.468-2.938c1.353-1.146.633-3.336-1.142-3.477l-4.552-.36-1.754-4.17Z"/>
                      <title>User Rating</title>
                    </svg>
                    <h1 class="text-lg font-bold">${score_fix} / 10</h1>
                  </div>
                `;
            }

            const add_movie_btn = document.getElementById("add-movie");
            add_movie_btn.disabled = false;
            add_movie_btn.classList.remove("cursor-not-allowed");
        }

        window.addEventListener('pageshow', function (event) {
            load_user_list();
            load_data();
        });

        let lastFetchTime = 0;
        window.addEventListener('focus', function (event) {
            const now = Date.now();

            if (now - lastFetchTime > 2500) {
                load_user_list();
                lastFetchTime = now;
            }
        });
    </script>
</body>

</html>
